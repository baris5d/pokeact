$red : #E94560;
$blue : #345a9c;
$navy : #0F3460;
$navy-2: #16213E;
$green : #14C38E;
$yellow : #f8ce01;
$orange : #dc3545;
$purple : #B3005E;
$grey : #6c757d;
$black : #111112;
$white : #f8f9fa;
$pink : #FF5F9E;

$titleFont: 'Lato', sans-serif;
$titleSize: 2.5rem;


$themes: (
    light: (
        backgroundColor: #f1f1f1,
        textColor: #333,
        primaryColor: #c21858,
        secondaryColor: #31363a,
        lightColor: #f1f1f1,
        darkColor: #343a40,
        borderColor: $blue,
        dominantColor: #f1f1f1
    ),
    dark: (
        backgroundColor: #1A1A2E,
        textColor: #eeeeee,
        primaryColor: #c21858,
        secondaryColor: #31363a,
        lightColor: #f1f1f1,
        darkColor: #222324,
        borderColor: $yellow,
        dominantColor: #f1f1f1
    )
);

/**
  * Mixin to generate theme classes
  * @param {Map} $themes - Map of themes
  * @param {String} $theme - Name of the theme
  * @param {String} $key - Name of the variable
  * @param {String} $value - Value of the variable
*/
@mixin themify($themes) {
    @each $theme, $map in $themes {
      .theme-#{$theme} & {
        $theme-map: () !global;
        @each $key, $submap in $map {
          $value: map-get(map-get($themes, $theme), '#{$key}');
          $theme-map: map-merge(
            $theme-map,
              (
                $key: $value,
              )
            ) !global;
          }
          @content;
          $theme-map: null !global;
      }
    }
}

@function themed($key) {
    @return map-get($theme-map, $key);
}
